{"name":"Dabsquaredpushnotificationsbundle","tagline":"Push Notifications Bundle For Symfony 2, Designed like FOSCommentBundle","body":"# DABSquaredPushNotificationsBundle ![](https://secure.travis-ci.org/bassrock499/DABSquaredPushNotificationsBundle.png)\r\n\r\n\r\nA bundle to allow sending of push notifications to mobile devices.  Currently supports Android (C2DM, GCM), Blackberry, Safari and iOS devices. The Base framework is imported from https://github.com/richsage/RMSPushNotificationsBundle\r\n\r\nAny contributions are welcome. The goal here is to provide an interface for push notifications with device registration and user device pairing just like FOSCommentBundle, but with very little code to write.\r\n\r\n[![knpbundles.com](http://knpbundles.com/DABSquared/DABSquaredPushNotificationsBundle/badge)](http://knpbundles.com/DABSquared/DABSquaredPushNotificationsBundle)\r\n\r\n\r\nRoad Map\r\n-------------\r\n\r\nV1.0:\r\n  * Support Basic Device Registration for iOS Devices\r\n  * Be able to associate a device with a user much like FOSCommentBundle\r\n  * Be able to send messages to a particular device or user, using about 2-4 lines of code.\r\n  * Auto-manage badge numbers. \r\n\r\nV1.1:\r\n  * Safari Push Notifications\r\n\r\nV2.0:\r\n  * Support Device Registration for Android (Accepting Pull Requests)\r\n  * Support Device Registration for Blackberry (Accepting Pull Requests)\r\n  * Support Device Registration for Mac Apps (Accepting Pull Requests)\r\n  * Push Notification read receipts and statistics like UrbanAirship.\r\n    * As of V1.0 this data is being reported back from iOS devices.\r\n  * Create A Dashboard\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nThe bulk of the documentation is stored in the `Resources/doc/index.md`\r\nfile in this bundle:\r\n\r\n[Read the Documentation](https://github.com/DABSquared/DABSquaredPushNotificationsBundle/blob/master/Resources/doc/index.md)\r\n\r\nInstallation\r\n------------\r\n\r\nAll the installation instructions are located in [documentation](https://github.com/DABSquared/DABSquaredPushNotificationsBundle/blob/master/Resources/doc/index.md).\r\n\r\nLicense\r\n-------\r\n\r\nThis bundle is under the MIT license. See the complete license in the bundle:\r\n\r\n    Resources/meta/LICENSE\r\n\r\n\r\nConfiguration\r\n-------\r\n\r\nBelow you'll find all configuration options; just use what you need:\r\n\r\n``` yaml\r\n    dab_push_notifications:\r\n      android:\r\n          c2dm:\r\n              username: <string_android_c2dm_username>\r\n              password: <string_android_c2dm_password>\r\n              source: <string_android_c2dm_source>\r\n          gcm:\r\n              api_key: <string_android_gcm_api_key>\r\n      ios:\r\n          certificates:  #replace these certs with your own as well as app ids. The bundle will loop through all certs displayed here when sending a push based on the sandbox param. You can add as many certificates as you need. Also note that the bundle will send using certificates that match the internal_app_ids of the registered devices.\r\n            dev_prem: { sandbox: true, pem: %kernel.root_dir%/../pushcerts/premium/dev/certificate.pem, passphrase: ~, internal_app_id: 0000001}\r\n            dev_lite: { sandbox: true, pem: %kernel.root_dir%/../pushcerts/lite/dev/certificate.pem, passphrase: ~, internal_app_id: 0000002}\r\n            prod_prem: { sandbox: false, pem: %kernel.root_dir%/../pushcerts/premium/prod/certificate.pem, passphrase: ~, internal_app_id: 0000001}\r\n            prod_lite: { sandbox: false, pem: %kernel.root_dir%/../pushcerts/lite/prod/certificate.pem, passphrase: ~,internal_app_id: 0000002}\r\n      blackberry:\r\n          evaluation: <bool_bb_evaluation_mode>\r\n          app_id: <string_bb_app_id>\r\n          password: <string_bb_password>\r\n      safari:\r\n          pem: %kernel.root_dir%/../pushcerts/safari/safari_push.pem\r\n          pk12: %kernel.root_dir%/../pushcerts/safari/Certificates.p12\r\n          passphrase: ~\r\n          website_push_id: web.com.demo\r\n          icon16x16: %kernel.root_dir%/../pushcerts/safari/icon_16x16.png\r\n          icon16x16@2x: %kernel.root_dir%/../pushcerts/safari/icon_16x16@2x.png\r\n          icon32x32: %kernel.root_dir%/../pushcerts/safari/icon_32x32.png\r\n          icon32x32@2x: %kernel.root_dir%/../pushcerts/safari/icon_32x32@2x.png\r\n          icon128x128: %kernel.root_dir%/../pushcerts/safari/icon_128x128.png\r\n          icon128x128@2x: %kernel.root_dir%/../pushcerts/safari/icon_128x128@2x.png\r\n          websiteName: Demo Site\r\n          allowedDomains: [\"https://demo.com\",\"https://www.demo.com\"]\r\n          urlFormatString: http://www.demo.com/%@\r\n          webServiceURL: https://www.demo.com\r\n```\r\n\r\n\r\n\r\n## DABSquared New Usage\r\n\r\nSend to a User:\r\n\r\n``` php\r\nuse DABSquared\\PushNotificationsBundle\\Message\\iOSMessage;\r\n\r\nclass PushDemoController extends Controller\r\n{\r\n    public function pushAction($aUser)\r\n    {\r\n\r\n        foreach($aUser->getDevices() as $device) {\r\n\r\n            $message = new Message();\r\n            $message->setMessage('Oh my! A push notification!');\r\n            $message->setDevice($device);\r\n            $this->container->get('dab_push_notifications')->send($message);\r\n\r\n        }\r\n\r\n        return new Response('Push notification send!');\r\n    }\r\n}\r\n```\r\n\r\nSend to a Device:\r\n\r\n``` php\r\nuse DABSquared\\PushNotificationsBundle\\Message\\iOSMessage;\r\n\r\nclass PushDemoController extends Controller\r\n{\r\n    public function pushAction($aDevice)\r\n    {\r\n        $message = new Message();\r\n        $message->setMessage('Oh my! A push notification!');\r\n        $message->setDevice($aDevice);\r\n\r\n        $this->container->get('dab_push_notifications')->send($message);\r\n\r\n        return new Response('Push notification send!');\r\n    }\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}